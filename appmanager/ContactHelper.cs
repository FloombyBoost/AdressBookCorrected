using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using NUnit.Framework;
using NUnit.Framework.Legacy;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;

namespace AdressBook_web_test
{
    
        public class ContactHelper : HelperBase
        {
           
            public ContactHelper(ApplicationManager manager) : base(manager)
        {
              
            }

        private List<ContactData> ContactCache = null;

        public List<ContactData> GetContactList()
        {

            if (ContactCache == null)
            {
              
                ContactCache = new List<ContactData>();
                List<String> Name = new List<String>();
                List<String> LastName = new List<String>();
                List<String> Id= new List<String>();


                ICollection<IWebElement> elementName = driver.FindElements(By.XPath("//td[3]"));

                ICollection<IWebElement> elementLastName = driver.FindElements(By.XPath("//td[2]"));

                ICollection<IWebElement> elementId= driver.FindElements(By.Name("selected[]"));
                //By.TagName("input[name = \"selected[]\"]\"")



                foreach (IWebElement element in elementId)
                {

                    
                    Id.Add(element.GetAttribute("value"));
                }


                foreach (IWebElement element in elementName)
                {

                    Name.Add(element.Text);
                    
                }

                foreach (IWebElement element in elementLastName)
                {

                    LastName.Add(element.Text);
                }

                for (int i = 0; i < elementName.Count; i++)
                {
                    ContactCache.Add(new ContactData(Name[i],LastName[i]) {Id = Id[i] });
                    
                }

                
            }

            return new List<ContactData>(ContactCache);
        }



        public ContactHelper Create(ContactData contact)
        {
            InitContactCreation();
            FillContactForm(contact);
            SubmitContactCreation();
            SubmitHome();
            return this;
        }

        public void AutoGenerationContact(int untillNumber)//новый  помощник
        {
            int CountAddContact = 0;
            while (!IsSelectContact(untillNumber))
            {
               // if (untillNumber == 0) break;
                InitContactCreation();
                FillContactForm(new ContactData($"CountAutoGenerated{CountAddContact}", "AddAutoContact"));
                SubmitContactCreation();
                SubmitHome();
                CountAddContact++;
            }
        }

        public ContactHelper Modify(int n, ContactData newcontact)
        {
           
                InitContactModify(n);
                FillContactForm(newcontact);
                SubmitContactModify();
                SubmitHome();
            
            
                //SelectContact(n);  как показывает практика выделение контакта перед изменением ничего не дает.Нужен конкретный клик по иконке
               
            return this;
           
        }


        public ContactHelper Modify(string id , ContactData newcontact)
        {

            InitContactModify(id);
            FillContactForm(newcontact);
            SubmitContactModify();
            SubmitHome();


            //SelectContact(n);  как показывает практика выделение контакта перед изменением ничего не дает.Нужен конкретный клик по иконке

            return this;

        }

        public ContactHelper SelectContact(int n)
        {
            driver.FindElement(By.XPath($"//table[@id='maintable']/tbody/tr[{2+n}]/td")).Click();
            return this;
        }

        public ContactHelper SelectContact(string id)
        {
          
            
                driver.FindElement(By.XPath("(//input[@name='selected[]' and @value='" + id + "'])")).Click();
                return this;
            

            
        }

        public bool IsSelectContact(int n)
        {
            return IsElementPresent(By.XPath($"//table[@id='maintable']/tbody/tr[{2 + n}]/td"));
        }

        public ContactHelper Remove(int v)
        {
            
                SelectContact(v);
                SubmitContactRemove();
            ContactCache = null;



            return this;
        }

        public ContactHelper Remove(ContactData contact)
        {

            SelectContact(contact.Id);
            SubmitContactRemove();
            ContactCache = null;



            return this;
        }

        public ContactHelper SubmitContactRemove()
        {
            driver.FindElement(By.XPath("//input[@value='Delete']")).Click();
           // driver.SwitchTo().Alert().Accept();// закрыть Алерт? какой алерт?
            return this;
        }

        public ContactHelper SubmitContactModify()
        {
            driver.FindElement(By.XPath("//input[21]")).Click();
            ContactCache = null;
            return this;
        }

        public ContactHelper InitContactModify(int n)
        {
            // driver.FindElement(By.CssSelector("img[alt=\"Edit\"]")).Click(); первая иконка
            driver.FindElement(By.XPath($"//table[@id='maintable']/tbody/tr[{2+n}]/td[8]/a/img")).Click();  //все вроме первой, но возможно и первую найдет
            return this;
        }

        public ContactHelper InitContactModify(string id)
        {
            // driver.FindElement(By.CssSelector("img[alt=\"Edit\"]")).Click(); первая иконка
            driver.FindElement(By.XPath("(//input[@name='selected[]' and @value='" + id + "']/../..)")).FindElement(By.XPath("td[8]/a/img")).Click();  
           // driver.FindElement(By.XPath("(//input[@name='selected[]' and @value='" + id + "'][td[8]/a/img])")).FindElement(By.XPath("/")).Click();
            // driver.FindElement(By.XPath($"//table[@id='maintable']/tbody/tr[{2 + n}]/td[8]/a/img")).Click();  //все вроме первой, но возможно и первую найдет
            return this;
        }

        public ContactHelper InitContactInfo(int index)
        {
            // driver.FindElement(By.CssSelector("img[alt=\"Edit\"]")).Click(); первая иконка

            //driver.FindElements(By.Name("entry"))[index].FindElement(By.CssSelector("img[alt=\"Details\"]")).Click();
            driver.FindElement(By.XPath($"//table[@id='maintable']/tbody/tr[{2 + index}]/td[7]/a/img")).Click();  //все вроме первой, но возможно и первую найдет
            return this;
        }

        public ContactHelper InitContactCreation()
        {
            driver.FindElement(By.LinkText("add new")).Click();
            return this;
        }

        public ContactHelper FillContactForm(ContactData contact)
        {
            Type(By.Name("firstname"), contact.Name);
            Type(By.Name("lastname"), contact.LastName);
           
            return this;
        }

        public ContactHelper SubmitContactCreation()
        {
            driver.FindElement(By.XPath("//div[@id='content']/form/input[20]")).Click();
            ContactCache = null;
            return this;
        }

        public ContactHelper SubmitHome()
        {
            driver.FindElement(By.LinkText("home")).Click();
            return this;

        }
        public int Count()
        {
            return driver.FindElements(By.XPath("//td[3]")).Count;
        }

        

        

        public ContactData GetContactInformationFromEdit(int index)
        {
            manager.Navigator.OpenHomePage();
            InitContactModify(index);
            string firstName = driver.FindElement (By.Name("firstname")).GetAttribute("value");
            string lastName = driver.FindElement(By.Name("lastname")).GetAttribute("value");
            string address = driver.FindElement(By.Name("address")).GetAttribute("value");

            string homePhone = driver.FindElement(By.Name("home")).GetAttribute("value");
            string mobilePhone = driver.FindElement(By.Name("mobile")).GetAttribute("value");
            string workPhone = driver.FindElement(By.Name("work")).GetAttribute("value");


            
            string email1 = driver.FindElement(By.Name("email")).GetAttribute("value");
            string email2 = driver.FindElement(By.Name("email2")).GetAttribute("value");
            string email3 = driver.FindElement(By.Name("email3")).GetAttribute("value");
            string allInfo = "";


            return new ContactData(firstName, lastName)
            {
                Address = address,
                HomePhone = homePhone,
                MobilePhone = mobilePhone,
                WorkPhone = workPhone,
                Email1 = email1,
                 Email2 = email2,
                Email3 = email3,
                AllInfo = allInfo
            };
            
        }

        public ContactData GetContactInformationFromTable(int index)
        {
            manager.Navigator.OpenHomePage();
            IList<IWebElement> cells = driver.FindElements(By.Name("entry"))[index].FindElements(By.TagName("td"));
            string lastName = cells[1].Text;
            string firstName = cells[2].Text;
            string address = cells[3].Text;
            string allEmails = cells[4].Text;
            string allphones = cells[5].Text;

            return new ContactData(firstName, lastName)
            {
                Address = address,
                AllPhones = allphones,
                AllEmails = allEmails
               
            };
            throw new NotImplementedException();
        }

        public String GetContactInformationFromInfo(int index)
        {
            manager.Navigator.OpenHomePage();
            InitContactInfo(index);

            string allinfo = driver.FindElement(By.Id("content")).Text.Trim();
            //ContactData ainfo = new ContactData("Allinfo", "All") {AllInfo = allinfo };
            /*
            IList<IWebElement> allInfo = driver.FindElements(By.Id("content"));
            List<String> AllInfo = new List<String>();
            foreach (IWebElement element in allInfo) 
            {
                AllInfo.Add(element.Text.Trim()); 
            }
            */

            return allinfo;

        }
    }



}
